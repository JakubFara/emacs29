* Setup Package
#+BEGIN_SRC emacs-lisp
;; Disable signature checking early to avoid compat.tar.sig errors
(setq package-check-signature nil)

(require 'package)
(setq package-archives
      '(("melpa" . "https://melpa.org/packages/")
        ("gnu"   . "https://elpa.gnu.org/packages/")))

(package-initialize)

(unless package-archive-contents
  (package-refresh-contents))

(unless (package-installed-p 'gnu-elpa-keyring-update)
  (package-install 'gnu-elpa-keyring-update))

(gnu-elpa-keyring-update)
#+END_SRC
* UI Tweaks

#+BEGIN_SRC emacs-lisp
;; Disable the menu bar
(menu-bar-mode -1)

;; Disable the tool bar
(when (fboundp 'tool-bar-mode)
  (tool-bar-mode -1))

;; Disable the scroll bar
(when (fboundp 'scroll-bar-mode)
  (scroll-bar-mode -1))

;; Optional: Disable startup screen
(setq inhibit-startup-screen t)
#+END_SRC

* Disable Startup Screen and Bell
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
(setq initial-scratch-message nil)
(setq ring-bell-function 'ignore)
#+END_SRC

* Vertico
#+BEGIN_SRC emacs-lisp
(use-package vertico
  :ensure t
  :init
  (vertico-mode))

(with-eval-after-load 'vertico
  (define-key vertico-map (kbd "<escape>") #'abort-recursive-edit)
  (define-key vertico-map (kbd "C-j") #'vertico-next)
  (define-key vertico-map (kbd "C-k") #'vertico-previous))

(use-package consult
  :ensure t)

(use-package marginalia
  :ensure t
  :init
  (marginalia-mode))
#+END_SRC

* Install Doom Theme
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'doom-themes)
  (package-install 'doom-themes))
(load-theme 'doom-one t)
(require 'doom-themes)
(doom-themes-org-config)
#+END_SRC

* Evil, General, and Which-Key
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'evil)
  (package-install 'evil))
(require 'evil)
(evil-mode 1)

(unless (package-installed-p 'general)
  (package-install 'general))
(require 'general)

(unless (package-installed-p 'which-key)
  (package-install 'which-key))
(which-key-mode)
#+END_SRC
* Vterm Integration

#+BEGIN_SRC emacs-lisp
;; Install and require vterm
(unless (package-installed-p 'vterm)
  (package-refresh-contents)
  (package-install 'vterm))
(require 'vterm)

;; Set your preferred shell (optional if your SHELL env is already set)
(setq vterm-shell "/bin/bash") ;; or "/usr/bin/zsh" or "fish"

;; Optional: Start in insert mode if using Evil
(when (bound-and-true-p evil-mode)
  (add-hook 'vterm-mode-hook #'evil-insert-state))

;; Optional: Close buffer on exit
(setq vterm-kill-buffer-on-exit t)

;; Optional: Don't let evil override vterm
;; (with-eval-after-load 'evil
  ;; (add-to-list 'evil-emacs-state-modes 'vterm-mode))

;; Function to open vterm in a horizontal split below
(defun my/open-vterm-below ()
  "Open vterm in a horizontal split below with a max height of 18 rows."
  (interactive)
  (let* ((buf (get-buffer "*vterm*"))
         (total-height (window-total-height))
         (split-height (max 4 (- total-height 18))) ;; ensure top window gets at least 4 rows
         (win (split-window nil split-height 'below)))
    (select-window win)
    (if buf
        (switch-to-buffer buf)
      (vterm))))
#+END_SRC

* Install general.el for Doom-style keybindings
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'general)
  (package-install 'general))

(require 'general)
#+END_SRC

* Org
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'org)
  (package-install 'org))
(require 'org)
#+END_SRC
* Doom-style Leader Key
* Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :defer t
    :config
    ;; Force Magit to open in the current window
    (setq magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+END_SRC

* Eyebrowse
#+BEGIN_SRC emacs-lisp
  (use-package eyebrowse
    :ensure t
    :config
    (eyebrowse-mode t)
    ;; Optional: Doom-style slot names in the modeline
    (setq eyebrowse-new-workspace t
	  eyebrowse-wrap-around t
	  eyebrowse-mode-line-style 'smart))
#+END_SRC

* My Keybindings
#+BEGIN_SRC emacs-lisp
;; Ensure required packages are loaded
(require 'general)
(require 'which-key)
(which-key-mode)

;; Define the leader key using general
(general-create-definer my/leader-keys
  :keymaps '(normal insert visual emacs) ;; Modes to activate in
  :prefix "SPC"
  :global-prefix "C-SPC") ;; C-SPC works even outside evil mode

;; Now use that definer
(my/leader-keys
  "f"   '(:ignore t :which-key "files")
  "ff"  '(find-file :which-key "find file")
  "fs"  '(save-buffer :which-key "save file")

  "b"   '(:ignore t :which-key "buffers")
  "bb"  '(switch-to-buffer :which-key "switch buffer")
  "bk"  '(kill-this-buffer :which-key "kill buffer")

  "w"   '(:ignore t :which-key "windows")
  "ws"  '(split-window-below :which-key "split below")
  "wv"  '(split-window-right :which-key "split right")
  "wd"  '(delete-window :which-key "delete window")
  "wo"  '(delete-other-windows :which-key "only this window")
  "wm"  '(delete-other-windows :which-key "maximize window")
  "wc"  '(delete-window :which-key "close window")
  "wh"  '(windmove-left :which-key "← window")
  "wj"  '(windmove-down :which-key "↓ window")
  "wk"  '(windmove-up :which-key "↑ window")
  "wl"  '(windmove-right :which-key "→ window")

  "ot"  '(my/open-vterm-below :which-key "terminal")

  "q"   '(:ignore t :which-key "quit")
  "qq"  '(save-buffers-kill-terminal :which-key "quit emacs")
    ;; Buffer management
  "b"   '(:ignore t :which-key "buffers")
  "bb"  '(switch-to-buffer :which-key "switch buffer")
  "bk"  '(kill-this-buffer :which-key "kill buffer")
  "bd"  '(kill-buffer :which-key "delete buffer")
  "bn"  '(next-buffer :which-key "next buffer")
  "bp"  '(previous-buffer :which-key "previous buffer")
  "br"  '(rename-buffer :which-key "rename buffer")
  "bs"  '(save-buffer :which-key "save buffer")
  "bl"  '(list-buffers :which-key "list buffers")
  "bx"  '(kill-buffer-and-window :which-key "kill buffer & window")
  )
#+END_SRC

    ;; Magit
    "g"   '(:ignore t :which-key "git")
    "gs"  '(magit-status :which-key "status")
    "gc"  '(magit-commit :which-key "commit")
    "gl"  '(magit-log :which-key "log")
    "gb"  '(magit-branch :which-key "branch")
    "gg"  '(magit :which-key "branch")
