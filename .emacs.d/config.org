* Setup Package
#+BEGIN_SRC emacs-lisp
  ;; Disable signature checking early to avoid compat.tar.sig errors
  (setq package-check-signature nil)

  (require 'package)
  (setq package-archives
	'(("melpa" . "https://melpa.org/packages/")
	  ("gnu"   . "https://elpa.gnu.org/packages/")))

  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'gnu-elpa-keyring-update)
    (package-install 'gnu-elpa-keyring-update))

  (gnu-elpa-keyring-update)
  (defvar my/vterm-workspace-table (make-hash-table :test 'equal)
    "Hash table mapping Eyebrowse workspace slots to their vterm buffers.")
#+END_SRC
* UI Tweaks
#+BEGIN_SRC emacs-lisp
  ;; Disable the menu bar
  (menu-bar-mode -1)

  ;; Disable the tool bar
  (when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))

  ;; Disable the scroll bar
  (when (fboundp 'scroll-bar-mode)
    (scroll-bar-mode -1))

  ;; Optional: Disable startup screen
  ;; (setq inhibit-startup-screen t)
#+END_SRC

* Disable Startup Screen and Bell
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (setq initial-scratch-message nil)
  (setq ring-bell-function 'ignore)
#+END_SRC

* Vertico
#+BEGIN_SRC emacs-lisp
  (use-package vertico
    :ensure t
    :init
    (vertico-mode))

  (with-eval-after-load 'vertico
    (define-key vertico-map (kbd "<escape>") #'abort-recursive-edit)
    (define-key vertico-map (kbd "C-j") #'vertico-next)
    (define-key vertico-map (kbd "C-k") #'vertico-previous))

  (use-package consult
    :ensure t)

  (use-package marginalia
    :ensure t
    :init
    (marginalia-mode))
  (defun my/minibuffer-delete-full-dir-segment ()
    "Delete the last full directory segment from the minibuffer input."
    (interactive)
    (let* ((input (minibuffer-contents))
	   (prompt-end (minibuffer-prompt-end))
	   (path (buffer-substring-no-properties prompt-end (point-max)))
	   (path (directory-file-name path)) ;; remove trailing slash
	   (parent (file-name-directory path)))
      (when parent
	(delete-region prompt-end (point-max))
	(insert parent))))
  (with-eval-after-load 'vertico
    (define-key vertico-map (kbd "C-h") #'my/minibuffer-delete-full-dir-segment))
#+END_SRC

* Install Doom Theme
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'doom-themes)
    (package-install 'doom-themes))
  (load-theme 'doom-one t)
  (require 'doom-themes)
  (doom-themes-org-config)
#+END_SRC

* Evil, General, and Which-Key
#+BEGIN_SRC emacs-lisp
    (setq evil-want-keybinding nil)
    (unless (package-installed-p 'evil)
      (package-install 'evil))
    (require 'evil)
    (evil-mode 1)

    (unless (package-installed-p 'general)
      (package-install 'general))
    (require 'general)

    (unless (package-installed-p 'which-key)
      (package-install 'which-key))
    (which-key-mode)

    (unless (package-installed-p 'evil-collection)
      (package-refresh-contents)
      (package-install 'evil-collection))

    (require 'evil-collection)
    (evil-collection-init) ;; Optional: restrict to just 'vterm with (evil-collection-init 'vterm)
#+END_SRC

* Vterm Integration
#+BEGIN_SRC emacs-lisp
  ;; Install and require vterm
  (unless (package-installed-p 'vterm)
    (package-refresh-contents)
    (package-install 'vterm))
  (require 'vterm)

  ;; Preferred shell
  (setq vterm-shell "/bin/bash")

  ;; Always start in insert mode if using Evil
  (add-hook 'vterm-mode-hook #'evil-insert-state)

  ;; Automatically kill buffer when exiting shell
  (setq vterm-kill-buffer-on-exit t)

  ;; Open vterm in horizontal split below
  (defun my/open-vterm-below ()
    "Open a full-width vterm in the bottom window of the current Eyebrowse workspace.
  If the workspace already has one, reuse it."
    (interactive)
    (let* ((slot (eyebrowse--get 'current-slot))
	   (existing-buf (gethash slot my/vterm-workspace-table))
	   (vterm-buf (if (and existing-buf (buffer-live-p existing-buf))
			  existing-buf
			(let ((buf (vterm (generate-new-buffer-name (format "*vterm-%d*" slot)))))
			  (puthash slot buf my/vterm-workspace-table)
			  buf)))
	   ;; Select the bottom-most window spanning full width
	   (bottom-window (split-window (frame-root-window) -18 'below)))
      (select-window bottom-window)
      (switch-to-buffer vterm-buf)))

  (defun my/vterm-remove-dead-buffer ()
    "Remove dead vterm buffer from the workspace table."
    (let ((slot (eyebrowse--get 'current-slot)))
      (when (and (gethash slot my/vterm-workspace-table)
		 (eq (gethash slot my/vterm-workspace-table) (current-buffer)))
	(remhash slot my/vterm-workspace-table))))

  (add-hook 'kill-buffer-hook #'my/vterm-remove-dead-buffer)

  (unless (package-installed-p 'evil-collection)
    (package-install 'evil-collection))

  (require 'evil-collection)
  (evil-collection-init 'vterm)
#+END_SRC

* Install general.el for Doom-style keybindings
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'general)
    (package-install 'general))

  (require 'general)
#+END_SRC

* Org
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'org)
    (package-install 'org))
  (require 'org)
#+END_SRC

* Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :defer t
    :config
    ;; Require ediff integration
    (require 'magit-ediff)

    ;; Open Magit buffers in a left-side window
    (setq magit-display-buffer-function
	  (lambda (buffer)
	    (let ((window (display-buffer-in-side-window
			   buffer '((side . left)
				    (slot . 0)
				    (window-width . 0.4)))))
	      window)))

    ;; Evil keybinding for magit refresh
    (evil-define-key 'normal magit-mode-map (kbd "g z") #'magit-refresh))
#+END_SRC

* Eyebrowse
#+BEGIN_SRC emacs-lisp
  (use-package eyebrowse
    :ensure t
    :config
    (eyebrowse-mode t)
    ;; Optional: Doom-style slot names in the modeline
    (setq eyebrowse-new-workspace t
	  eyebrowse-wrap-around t
	  eyebrowse-mode-line-style 'smart))
#+END_SRC

* Clang-Format
#+BEGIN_SRC emacs-lisp
  (use-package clang-format
    :ensure t)
  (global-set-key (kbd "C-M-\\") 'clang-format-region)

  (defun my-c++-mode-hook ()
    (add-hook 'before-save-hook #'clang-format-buffer nil t))
  (add-hook 'c++-mode-hook 'my-c++-mode-hook)
#+END_SRC

* My Keybindings
#+BEGIN_SRC emacs-lisp
  (defun my/comment-line-dwim ()
    "Comment or uncomment current line or lines in region without including extra line."
    (interactive)
    (let ((beg (line-beginning-position))
	  (end (line-end-position)))
      (if (use-region-p)
	  (setq beg (save-excursion (goto-char (region-beginning)) (line-beginning-position))
		end (save-excursion (goto-char (region-end))
				    (if (bolp)
					(line-beginning-position)
				      (line-end-position))))
	(setq beg (line-beginning-position)
	      end (line-end-position)))
      (comment-or-uncomment-region beg end)))

  (global-set-key (kbd "C-/") 'my/comment-line-dwim)
  ;; (global-set-key (kbd "C-/") 'comment-dwim)
  (global-set-key (kbd "C-=") 'text-scale-increase)
  (global-set-key (kbd "C-+") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
#+END_SRC

* Doom-style Leader Key
#+BEGIN_SRC emacs-lisp
  ;; Ensure required packages are loaded
  ;; Ensure required packages are loaded
  (require 'general)
  (require 'which-key)
  (which-key-mode)

  (with-eval-after-load 'evil
    (define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)
    (define-key evil-visual-state-map (kbd "C-u") 'evil-scroll-up))

  ;; Define the leader key using general
  (general-create-definer my/leader-keys
    :keymaps '(normal insert visual emacs)
    :prefix "SPC"
    :global-prefix "C-SPC")

  (my/leader-keys
    ;; Files
    "f"   '(:ignore t :which-key "files")
    "ff"  '(find-file :which-key "find file")
    "fs"  '(save-buffer :which-key "save file")

    ;; Buffers
    "b"   '(:ignore t :which-key "buffers")
    "bb"  '(switch-to-buffer :which-key "switch buffer")
    "bk"  '(kill-this-buffer :which-key "kill buffer")
    "bd"  '(kill-this-buffer :which-key "delete buffer")
    "bn"  '(next-buffer :which-key "next buffer")
    "bp"  '(previous-buffer :which-key "previous buffer")
    "br"  '(rename-buffer :which-key "rename buffer")
    "bs"  '(save-buffer :which-key "save buffer")
    "bl"  '(list-buffers :which-key "list buffers")
    "bx"  '(kill-buffer-and-window :which-key "kill buffer & window")

    ;; Windows
    "w"   '(:ignore t :which-key "windows")
    "ws"  '(split-window-below :which-key "split below")
    "wv"  '(split-window-right :which-key "split right")
    "wd"  '(delete-window :which-key "delete window")
    "wo"  '(delete-other-windows :which-key "only this window")
    "wm"  '(delete-other-windows :which-key "maximize window")
    "wc"  '(delete-window :which-key "close window")
    "wh"  '(windmove-left :which-key "← window")
    "wj"  '(windmove-down :which-key "↓ window")
    "wk"  '(windmove-up :which-key "↑ window")
    "wl"  '(windmove-right :which-key "→ window")
    ;; Magit
    "g"   '(:ignore t :which-key "git")
    "gs"  '(magit-status :which-key "status")
    "gc"  '(magit-commit :which-key "commit")
    "gl"  '(magit-log :which-key "log")
    "gb"  '(magit-branch :which-key "branch")
    "gg"  '(magit :which-key "branch")

    ;; Terminal
    "ot"  '(my/open-vterm-below :which-key "terminal")

    "TAB"  '(:ignore t :which-key "workspace")
    "TAB TAB" '(eyebrowse-last-window-config :which-key "last workspace")
    "TAB n"   '(eyebrowse-create-window-config :which-key "new workspace")
    "TAB d"   '(eyebrowse-close-window-config :which-key "delete workspace")
    "TAB r"   '(eyebrowse-rename-window-config :which-key "rename workspace")
    "TAB 0"   '(eyebrowse-switch-to-window-config-0 :which-key "workspace 0")
    "TAB 1"   '(eyebrowse-switch-to-window-config-1 :which-key "workspace 1")
    "TAB 2"   '(eyebrowse-switch-to-window-config-2 :which-key "workspace 2")
    "TAB 3"   '(eyebrowse-switch-to-window-config-3 :which-key "workspace 3")
    "TAB 4"   '(eyebrowse-switch-to-window-config-4 :which-key "workspace 4")
    "TAB 5"   '(eyebrowse-switch-to-window-config-5 :which-key "workspace 5")
    "TAB 6"   '(eyebrowse-switch-to-window-config-6 :which-key "workspace 6")
    "TAB 7"   '(eyebrowse-switch-to-window-config-7 :which-key "workspace 7")
    "TAB 8"   '(eyebrowse-switch-to-window-config-8 :which-key "workspace 8")
    "TAB 9"   '(eyebrowse-switch-to-window-config-9 :which-key "workspace 9")

    ;; Quit
    "q"   '(:ignore t :which-key "quit")
    "qq"  '(save-buffers-kill-terminal :which-key "quit emacs"))
#+END_SRC
